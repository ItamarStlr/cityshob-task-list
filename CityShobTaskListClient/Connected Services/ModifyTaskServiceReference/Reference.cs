//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CityShobTaskListClient.ModifyTaskServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModifyTaskServiceReference.IModifyTaskService")]
    public interface IModifyTaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/AddTask", ReplyAction="http://tempuri.org/IModifyTaskService/AddTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Common.ModifyTaskError), Action="http://tempuri.org/IModifyTaskService/AddTaskModifyTaskErrorFault", Name="ModifyTaskError", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool AddTask(Common.UserTask userTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/AddTask", ReplyAction="http://tempuri.org/IModifyTaskService/AddTaskResponse")]
        System.Threading.Tasks.Task<bool> AddTaskAsync(Common.UserTask userTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/UpdateTask", ReplyAction="http://tempuri.org/IModifyTaskService/UpdateTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Common.ModifyTaskError), Action="http://tempuri.org/IModifyTaskService/UpdateTaskModifyTaskErrorFault", Name="ModifyTaskError", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool UpdateTask(Common.UserTask userTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/UpdateTask", ReplyAction="http://tempuri.org/IModifyTaskService/UpdateTaskResponse")]
        System.Threading.Tasks.Task<bool> UpdateTaskAsync(Common.UserTask userTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/DeleteTask", ReplyAction="http://tempuri.org/IModifyTaskService/DeleteTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Common.ModifyTaskError), Action="http://tempuri.org/IModifyTaskService/DeleteTaskModifyTaskErrorFault", Name="ModifyTaskError", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool DeleteTask(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/DeleteTask", ReplyAction="http://tempuri.org/IModifyTaskService/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/GetAllTasks", ReplyAction="http://tempuri.org/IModifyTaskService/GetAllTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Common.ModifyTaskError), Action="http://tempuri.org/IModifyTaskService/GetAllTasksModifyTaskErrorFault", Name="ModifyTaskError", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        Common.UserTask[] GetAllTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModifyTaskService/GetAllTasks", ReplyAction="http://tempuri.org/IModifyTaskService/GetAllTasksResponse")]
        System.Threading.Tasks.Task<Common.UserTask[]> GetAllTasksAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModifyTaskServiceChannel : CityShobTaskListClient.ModifyTaskServiceReference.IModifyTaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyTaskServiceClient : System.ServiceModel.ClientBase<CityShobTaskListClient.ModifyTaskServiceReference.IModifyTaskService>, CityShobTaskListClient.ModifyTaskServiceReference.IModifyTaskService {
        
        public ModifyTaskServiceClient() {
        }
        
        public ModifyTaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModifyTaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModifyTaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModifyTaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddTask(Common.UserTask userTask) {
            return base.Channel.AddTask(userTask);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskAsync(Common.UserTask userTask) {
            return base.Channel.AddTaskAsync(userTask);
        }
        
        public bool UpdateTask(Common.UserTask userTask) {
            return base.Channel.UpdateTask(userTask);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTaskAsync(Common.UserTask userTask) {
            return base.Channel.UpdateTaskAsync(userTask);
        }
        
        public bool DeleteTask(System.Guid taskId) {
            return base.Channel.DeleteTask(taskId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(System.Guid taskId) {
            return base.Channel.DeleteTaskAsync(taskId);
        }
        
        public Common.UserTask[] GetAllTasks() {
            return base.Channel.GetAllTasks();
        }
        
        public System.Threading.Tasks.Task<Common.UserTask[]> GetAllTasksAsync() {
            return base.Channel.GetAllTasksAsync();
        }
    }
}
